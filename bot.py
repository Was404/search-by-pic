import os
import asyncio
import tempfile
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from picarta import Picarta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
PICARTA_API_TOKEN = os.getenv("PICARTA_API_TOKEN")

if not all([TELEGRAM_TOKEN, PICARTA_API_TOKEN]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise EnvironmentError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


async def download_photo(message: types.Message) -> str:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
        temp_path = temp_file.name
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.id} [–†–∞–∑–º–µ—Ä: {photo.file_size} bytes]")
        await bot.download_file(file.file_path, temp_path)
        
        return temp_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        raise


def format_result(result: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Picarta"""
    if not result.get('predictions'):
        logger.warning("–ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ Picarta")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
    
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(result['predictions'])} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    return "\n".join([
        f"{idx}. –®–∏—Ä–æ—Ç–∞: {pred['latitude']:.4f}, –î–æ–ª–≥–æ—Ç–∞: {pred['longitude']:.4f}\n"
        f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred['score']:.2%}"
        for idx, pred in enumerate(result['predictions'], 1)
    ])


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å Picarta.ai"
    )


@dp.message(lambda message: message.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = message.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    temp_path = None
    try:
        temp_path = await download_photo(message)
        
        logger.debug(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Picarta –¥–ª—è —Ñ–∞–π–ª–∞: {temp_path}")
        localizer = Picarta(PICARTA_API_TOKEN)
        
        # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = datetime.now()
        result = await asyncio.to_thread(localizer.localize, img_path=temp_path)
        processing_time = (datetime.now() - start_time).total_seconds()
        
        logger.info(f"Picarta –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ–æ—Ç–æ –∑–∞ {processing_time:.2f} —Å–µ–∫")
        
        response_text = format_result(result)
        await message.answer(response_text)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
    finally:
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await bot.send_message(chat_id=os.getenv("ADMIN_CHAT_ID"), text="üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.warning("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞!")
    await bot.send_message(chat_id=os.getenv("ADMIN_CHAT_ID"), text="üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.session.close()


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())