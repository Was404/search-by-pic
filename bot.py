import os
import asyncio
import tempfile
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from picarta import Picarta
from dotenv import load_dotenv

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") 
PICARTA_API_TOKEN = os.getenv("PICARTA_API_TOKEN") 

#if not all([TELEGRAM_TOKEN, PICARTA_API_TOKEN]):
#    raise EnvironmentError("Missing required environment variables")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


async def download_photo(message: types.Message, bot: Bot) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    file = await bot.get_file(photo.file_id)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
    temp_path = temp_file.name
    await bot.download_file(file.file_path, temp_path)
    
    return temp_path


def format_result(result: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Picarta –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if not result.get('predictions'):
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
    
    response = ["üìç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:"]
    for idx, pred in enumerate(result['predictions'], 1):
        response.append(
            f"{idx}. –®–∏—Ä–æ—Ç–∞: {pred['latitude']:.4f}, "
            f"–î–æ–ª–≥–æ—Ç–∞: {pred['longitude']:.4f}\n"
            f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred['score']:.2%}"
        )
    
    return "\n".join(response)


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.(–±–µ—Å–ø–ª–∞—Ç–Ω–æ 3 —Ä–∞–∑–∞ –º–∞–∫—Å–∏–º—É–º)\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å Picarta.ai"
    )


@dp.message(lambda message: message.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        temp_path = await download_photo(message, bot)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Picarta
        localizer = Picarta(PICARTA_API_TOKEN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Picarta (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        result = await asyncio.to_thread(
            localizer.localize,
            img_path=temp_path
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response_text = format_result(result)
        await message.answer(response_text)
        
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'temp_path' in locals():
            os.unlink(temp_path)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())